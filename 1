# -*- coding: utf-8 -*

from flask import Flask, request, views
from functools import wraps
from CrnnUtility import CrnnUtility
import threading
import datetime
import logging
import json
import requests

requests.packages.urllib3.disable_warnings()

app = Flask(__name__)

def callApi(url, jsonData):
    proxies = {
        "http": "http://10.243.17.28:80",
        "https": "http://10.243.17.28:80",
    }
    logging.info('****************************************************************************************************************************')
    logging.info('URL : ' + url)
    logging.info('Body : ' + json.dumps(jsonData))
    # sending post request and saving response as response object
    r = requests.post(url = url, json = jsonData, headers={"Connection":"close"}, verify=False, timeout=60, proxies=proxies)
    logging.info('StatusCode : ' + str(r.status_code))
    logging.info('Response : ' + r.text)
    logging.info('****************************************************************************************************************************')
    return r.status_code

def login_require(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        #logging.basicConfig(format='%(asctime)s %(message)s')
        now = datetime.datetime.strftime(datetime.datetime.now(),'%Y%m%d%H%M%S')
        FORMAT = '%(asctime)s %(levelname)s: %(message)s'
        logging.basicConfig(level=logging.DEBUG, filename='/mnt/2c67bd82-3031-40f8-8f53-58564ba23509/Graphics/crnn/api/log/log_' + request.json['ModelName'] + '_' + now + '.txt', filemode='a', format=FORMAT)
        logging.info('參數檢查')
        missing_error = "缺少參數 : "
        MGUID = request.json['MGUID']
        ModelName = request.json['ModelName']
        AlgorithmSeqID = request.json['AlgorithmSeqID']
        Retry = request.json['Retry']
        Threshold = request.json['Threshold']
        Config = request.json['Config']
        FileSeqID = request.json['FileSeqID']
        SourceFileName = request.json['SourceFileName']
